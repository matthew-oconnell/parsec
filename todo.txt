JSON Schema features used in schemas/cfd_schema.json
=================================================

Status: Phase 1 and Phase 2 features have been implemented in the validator. Below is an updated list
showing what's implemented and what remains.

Completed (implemented)
- $ref (local-only resolution for "#/..." paths)
- type (string, number, integer, boolean, object, array)
- properties
- required
- items (single-schema form and tuple-style array-of-schemas)
- additionalProperties (boolean form supported; schema-form partially recognized)
- enum
- minimum / maximum
- exclusiveMinimum / exclusiveMaximum
- minItems / maxItems
- uniqueItems (stringified deep-equality via Value::dump())
- additionalItems (boolean and schema for tuple arrays)
- patternProperties
- minLength / maxLength (string length checks)
- Composition keywords: allOf, anyOf, oneOf

Remaining / open items (suggested next work)
- Full $ref robustness
  - RFC6901 JSON Pointer escaping in refs (e.g., keys with ~1 or ~0 sequences).
  - External $ref resolution (file or URL) and safe resolution policy.
  - Cycle detection and caching for resolved refs.

- additionalProperties (schema form)
  - Currently additionalProperties:true/false is supported; when it's a schema we should validate extra properties against that schema.

- uniqueItems: structural equality
  - Replace current string-dump approach with a structural deep-equality comparator for Values to avoid false positives/negatives.

- error reporting improvements for composition
  - Provide better aggregated error messages for nested oneOf/anyOf cases (helpful for debugging complex schemas).

- pattern (string regex on values)
  - Validate string values against a 'pattern' keyword (if present in schema entries).

- minProperties / maxProperties
  - Enforce object property-count constraints.

- dependencies / dependentRequired / dependentSchemas
  - Conditional presence rules used by some schemas.

- const, format, contentMediaType
  - Advanced constraints that may appear in other schemas.

- defaults / applyDefaults (optional)
  - Optionally populate missing properties with default values (non-mandatory; often used for tooling).

Notes / next steps
- The core validator now covers the majority of features used by the CFD schema. I recommend the next priorities be:
  1) Full $ref robustness (escaping and cycle-safe resolution)
  2) additionalProperties when it's a schema
  3) structural uniqueItems
  4) pattern (string patterns) and min/maxProperties

- I can implement any of the above in order and add unit tests that mirror the CFD schema usage. Tell me which you'd like to prioritize and I'll start the implementation and tests.

Generated from a scan of schemas/cfd_schema.json on commit: working workspace

